#!/usr/bin/env python
"""
Utility for CRAB2 to CRAB3 configuration file.

- For the splitting lumis_per_job(events_per_job) is taken from the CRAB2 config files.
- If it does not exist, I try to take total_number_of_events(lumis)/number_of_jobs.
- The Request name is set to the name of the crab3 config file passed by the command line
- Runselection in crab2 can be an interval like 132-255. We do not support it in crab3.
"""

import sys
import os

from ConfigParser import RawConfigParser
from optparse import OptionParser

from WMCore.Configuration import Configuration, saveConfigurationFile

DEFAULT_UNITS_PER_JOB = 50

def usage():
    msg = "Usage: crab2cfgTOcrab3py [<crab2configName>.cfg] [<crab3configName>.py]\n"
    msg += "crab2configName.cfg defaults to 'crab.cfg'; crab3configName.py defaults to 'crabConfig.py'"
    return msg

def _getsplitting(configC2, sectionC2, parameterC2):
    if configC2.has_option('CMSSW', 'lumis_per_job') or \
        configC2.has_option('CMSSW', 'total_number_of_lumis') and configC2.has_option('CMSSW', 'number_of_jobs'):
        return 'LumiBased'
    if configC2.has_option('CMSSW', 'events_per_job') or \
        configC2.has_option('CMSSW', 'total_number_of_events') and configC2.has_option('CMSSW', 'number_of_jobs'):
        return 'EventBased'
    return 'Please define here the splitting mode as either LumiBased, EventBased or FileBased.'

def _getunits(configC2, sectionC2, parameterC2):
    #either lumis_per_job is set, or both total_number_of_lumis and number_of_jobs.
    splitting = _getsplitting(configC2, sectionC2, parameterC2)
    if splitting == 'LumiBased':
        if configC2.has_option('CMSSW', 'lumis_per_job'):
            return configC2.getint('CMSSW', 'lumis_per_job')
        else:
            return configC2.getint('CMSSW', 'total_number_of_lumis') / configC2.getint('CMSSW', 'number_of_jobs')
    if splitting == 'EventBased':
        if configC2.has_option('CMSSW', 'events_per_job'):
            return configC2.getint('CMSSW', 'events_per_job')
        else:
            return configC2.getint('CMSSW', 'total_number_of_events') / configC2.getint('CMSSW', 'number_of_jobs')
    return DEFAULT_UNITS_PER_JOB

def _getlist(configC2, sectionC2, parameterC2):
    strlist = RawConfigParser.get(configC2, sectionC2, parameterC2)
    return strlist.split(',')

def _getSpacedList(configC2, sectionC2, parameterC2):
    strlist = RawConfigParser.get(configC2, sectionC2, parameterC2)
    return strlist.split()

def getInteger(configC2, sectionC2, parameterC2):
    return configC2.getint(sectionC2, parameterC2)

#For each Crab3 parameter give the corresponding crab2 parameter
paramsMap = [
    ('General'  , 'requestName'          , False, 'USER'   , 'ui_working_dir'           , RawConfigParser.get),
    ('General'  , 'transferOutput'       , False, 'USER'   , 'copy_data'                , RawConfigParser.getboolean),
    ('JobType'  , 'psetName'             , True , 'CMSSW'  , 'pset'                     , RawConfigParser.get),
    ('JobType'  , 'pyCfgParams'          , False, 'CMSSW'  , 'pycfg_params'             , _getSpacedList),
    ('JobType'  , 'inputFiles'           , False, 'USER'  , 'additional_input_files'   , _getlist),
    ('JobType'  , 'outputFiles'          , False, 'CMSSW'  , 'output_file'              , _getlist),
    ('JobType'  , 'maxjobruntime'        , False, 'GRID'   , 'max_wall_clock_time'      , getInteger),
    ('JobType'  , 'maxmemory'            , False, 'GRID'   , 'max_rss'                  , getInteger),
    ('Data'     , 'inputDataset'         , False, 'CMSSW'  , 'datasetpath'              , RawConfigParser.get),
    ('Data'     , 'dbsUrl'               , False, 'CMSSW'  , 'dbs_url'                  , RawConfigParser.get),
    ('Data'     , 'splitting'            , False, ''       , ''                         , _getsplitting),       #_getsplitting knows corresp. params
    ('Data'     , 'unitsPerJob'          , False, ''       , ''                         , _getunits),           #_getunits does the work
    ('Data'     , 'lumiMask'             , False, 'CMSSW'  , 'lumi_mask'                , RawConfigParser.get),
    ('Data'     , 'publication'          , False, 'USER'   , 'publish_data'             , RawConfigParser.getboolean),
    ('Data'     , 'publishDataName'      , False, 'USER'   , 'publish_data_name'        , RawConfigParser.get),
    ('Data'     , 'publishDbsUrl'        , False, 'USER'   , 'dbs_url_for_publication'  , RawConfigParser.get),
    ('Data'     , 'runRange'             , False, 'CMSSW'  , 'runselection'             , RawConfigParser.get),
    ('User'     , 'voRole'               , False, 'GRID'   , 'role'                     , RawConfigParser.get),
    ('User'     , 'voGroup'              , False, 'GRID'   , 'group'                    , RawConfigParser.get),
    ('Site'     , 'storageSite'          , False, 'USER'   , 'storage_element'          , RawConfigParser.get),
    ('Site'     , 'blacklist'            , False, 'GRID'   , 'se_black_list'            , _getlist),
    ('Site'     , 'whitelist'            , False, 'GRID'   , 'se_white_list'            , _getlist),
]

#Not yet supported parameters. If they are present in the crab2cfg file we print a message saying they are not yet supported
notYetSuppParams = ['script_arguments',
                    'outputdir',
                    'logdir',
                    'check_user_remote_dir',
                    'user_remote_dir',
                    'generator',
                    'thresholdLevel',
                    'requirements',
                    'dont_check_proxy', #we actually have something from the command line
                    'dont_check_myproxy',
                    'script_exe',
                    'use_parent',
                    'executable',
                    'data_location_override',
                    'allow_overflow',
                    'increment_seeds',
                    'preserve_seeds',
                    'first_run',
                    'subscribed',
                    'no_block_boundary',
                    'remove_default_blacklist',
                   ]

#List of deprecated parameters. We print a warning message saying they are obsolete
deprecatedParams = [
                    'server_name',
                    'use_server', #of course we use it
                    'scheduler',
                    'jobtype',
                    'return_data',
                    'skip_TFileService_output',
                    'get_edm_output',
                    'skipwmsauth',
                    'tasktype',
                    'local_stage_out',
                    'split_by_run',
                    'additional_jdl_parameters',
                    'virtual_organization',
                    'wms_service',
                    'ssh_control_persist',
                    'thresholdLevel',
                    'client',
                    'storage_path',
                    'storage_port',
                    'xml_report',
                    'usenamespace',
                    'debug_wrapper',
                    'deep_debug',
                    'dontCheckSpaceLeft',
                    'maxtarballsize',
                    'skipwmsauth',
                    'queue',
                    'resource',
                    'RB',
                    'verify_dbs23',
                    'use_dbs3',
                    'first_lumi',
                    'ce_black_list', 
                    'ce_white_list',
                    'max_cpu_time',
                   ]

def parseParameters():
    parser = OptionParser()
    (options, args) = parser.parse_args()
    if len(args) == 0:
        return 'crab.cfg', 'crabConfig.py'
    elif len(args) == 1:
        if args[0][-4:] == '.cfg':
            return args[0], 'crabConfig.py'
        elif args[0][-3:] == '.py':
            return 'crab.cfg', args[0]
    elif len(args) == 2:
        if args[0][-4:] == '.cfg' and args[1][-3:] == '.py':
            return args[0], args[1]
        if args[1][-4:] == '.cfg' and args[0][-3:] == '.py':
            return args[1], args[0]
    print usage()
    sys.exit(1)

def checkMonteCarlo(configC3, configC2):
    """
    May not be 100% accurate
    """
    monteCarlo = False
    if configC2.has_option('CMSSW', 'generator'):
        monteCarlo = True
    if configC2.has_option('CMSSW', 'datasetpath') and configC2.get('CMSSW', 'datasetpath') == 'None':
        monteCarlo = True
    if monteCarlo:
        print 'This appears to be a Monte Carlo job, setting type to privateMC'
        configC3.JobType.pluginName = 'privateMC'
        configC3.Data.totalUnits = configC2.getint('CMSSW', 'total_number_of_events')
    return monteCarlo


def getConfiguration(paramsMap, configC2):
    configC3 = Configuration()
    configC3.section_("General")
    configC3.section_("JobType")
    configC3.section_("Data")
#    configC3.section_("User")
    configC3.section_("Site")
    configC3.JobType.pluginName = 'Analysis'
    missingParams = []
    for sectionC3, parameterC3, mandatory, sectionC2, parameterC2, getter in paramsMap:
        try:
            crab2paramValue = getter(configC2, sectionC2, parameterC2)
        except Exception:
            if mandatory:
                missingParams.append((sectionC2, parameterC2, sectionC3, parameterC3))
                crab2paramValue = 'Cannot find parameter "%s" in section "[%s]" of the crab2 config file' % (parameterC2, sectionC2)
            else:
                crab2paramValue = None
        if crab2paramValue != None:
            section = getattr(configC3, sectionC3)
            setattr(section, parameterC3, crab2paramValue)
    # Is this CRAB2 config a MC config?
    checkMonteCarlo(configC3, configC2)
    return configC3, missingParams

def printUnsupporterParams(configC2):
    #Get supported parameters from the paramsMap list
    suppParams = [parameterC2 for _, _, _, _, parameterC2, _ in paramsMap]
    suppParams.extend(['lumis_per_job', 'total_number_of_lumis', 'number_of_jobs', 'events_per_job', 'total_number_of_events'])
    unknown     = []
    obsolete    = []
    notyetready = []    
    for section in configC2.sections():
        for paramName, _ in configC2.items(section):
            if paramName in deprecatedParams:
                obsolete.append(paramName)
            if paramName in notYetSuppParams:
                notyetready.append(paramName)
            if paramName not in suppParams + deprecatedParams + notYetSuppParams:
                unknown.append(paramName)
    report = ''
    if notyetready:
        report += "CRAB2 parameters not YET supported in CRAB3: \n\t" + ','.join(notyetready) 
    if obsolete:
        report += "\nCRAB2 parameters obsolete in CRAB3: \n\t" + ','.join(obsolete) 
    if unknown:
        report += "\nCRAB2 parameters unknown to this convertion utility: \n\t" + ','.join(unknown)  
    if report:
        print 'crab2cfgTOcrab3py report:'   
        print report         


if __name__ == "__main__":
    configNameC2, configNameC3 = parseParameters()
    if not os.path.isfile(configNameC2):
        errMsg =  "Error: Cannot find file %s \n" % configNameC2
        print errMsg + usage()
        sys.exit(2)
    if os.path.isfile(configNameC3):
        errMsg =  "Error: File %s already exists\n" % configNameC3
        print errMsg + usage()
        sys.exit(2)
    configC2 = RawConfigParser()
    configC2.read(configNameC2)
    configC3, missingParams = getConfiguration(paramsMap, configC2)
    if configC3.Data.unitsPerJob < 0:
        configC3.Data.unitsPerJob = DEFAULT_UNITS_PER_JOB
    saveConfigurationFile(configC3, configNameC3)
    print 'Convertion done!'
    printUnsupporterParams(configC2)
    if len(missingParams) > 0:
        print "WARNING: Not all the mandatory parameters were found in the crab2 configuration file. Open the crab3 generated config file to know which."

